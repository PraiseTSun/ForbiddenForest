//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Card"",
            ""id"": ""b8593263-391a-43cf-aef7-87a46297ec3b"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""ab1d2495-de5a-47d3-a495-8616884f756c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""b7d08a50-a57a-4936-a61d-6468c663678a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0cdb02a-21a6-4702-8500-170521653516"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf453a48-e8e1-452e-96b8-defb9c7738e5"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Card
        m_Card = asset.FindActionMap("Card", throwIfNotFound: true);
        m_Card_Click = m_Card.FindAction("Click", throwIfNotFound: true);
        m_Card_Mouse = m_Card.FindAction("Mouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Card
    private readonly InputActionMap m_Card;
    private ICardActions m_CardActionsCallbackInterface;
    private readonly InputAction m_Card_Click;
    private readonly InputAction m_Card_Mouse;
    public struct CardActions
    {
        private @GameInput m_Wrapper;
        public CardActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Card_Click;
        public InputAction @Mouse => m_Wrapper.m_Card_Mouse;
        public InputActionMap Get() { return m_Wrapper.m_Card; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CardActions set) { return set.Get(); }
        public void SetCallbacks(ICardActions instance)
        {
            if (m_Wrapper.m_CardActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_CardActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_CardActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_CardActionsCallbackInterface.OnClick;
                @Mouse.started -= m_Wrapper.m_CardActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_CardActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_CardActionsCallbackInterface.OnMouse;
            }
            m_Wrapper.m_CardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
            }
        }
    }
    public CardActions @Card => new CardActions(this);
    public interface ICardActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
    }
}
